{"version":3,"sources":["serviceWorker.js","styles/indexComponents.js","components/Login.jsx","actions/index.js","containers/AddCity.jsx","containers/ShowWeather.jsx","components/Wrapper.jsx","App.js","reducers/index.js","index.js"],"names":["Boolean","window","location","hostname","match","styled","h2","_templateObject","Ul","ul","_templateObject2","Li","li","_templateObject3","ItemCenterCenter","div","_templateObject4","BgColor","_templateObject5","Form","form","_templateObject6","Login","state","login","event","preventDefault","user","document","getElementById","password","value","this","setState","react_default","a","createElement","Redirect","to","action","onSubmit","checkUser","bind","id","className","type","placeholder","autoFocus","required","Component","addCity","city","temprature","removeCity","toggleShouldDelete","setWeather","Math","round","AddCity","Date","now","toString","query","concat","fetch","then","response","json","data","_this","props","onSetWeather","list","main","temp","catch","message","console","log","input","test","onAddCity","addEventListener","Fragment","onClick","connect","dispatch","GetData","toggle","target","tagName","onToggleShouldDelete","getAttribute","localState","length","map","element","index","key","data-key","style","textDecoration","shouldDelete","onRemoveCity","Wrapper","containers_AddCity","ShowWeather","App","HashRouter","Switch","Route","exact","path","component","initialState","localStorage","getItem","JSON","parse","store","createStore","arguments","undefined","Object","toConsumableArray","i","objectSpread","filter","item","subscribe","getState","setItem","stringify","ReactDOM","render","es","src_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e77607da.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import styled from 'styled-components';\r\n\r\nexport const Title = styled.h2`\r\n  font-size: 1.5em;\r\n  text-align: center;\r\n  color: palevioletred;\r\n`;\r\n\r\nexport const Ul = styled.ul`\r\n  list-style-type: none;\r\n`;\r\n\r\nexport const Li = styled.li`\r\n  font-size: 1.5em;\r\n  text-align: center;\r\n  color: #fff;\r\n`;\r\n\r\nexport const ItemCenterCenter = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  height: 100vh;\r\n`;\r\n\r\n\r\nexport const BgColor = styled.div`\r\n  height: 100vh;\r\n  background: #5D2477\r\n  background: -webkit-radial-gradient(bottom right, #5D2477, #10054C)\r\n  background: -moz-radial-gradient(bottom right, #5D2477, #10054C)\r\n  background: radial-gradient(bottom right, #5D2477, #10054C)\r\n`;\r\n\r\nexport const Form = styled.form`\r\n  display: block;\r\n  width: 300px;\r\n  height: 200px;\r\n`;\r\n","import React, { Component } from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { BgColor, Form, ItemCenterCenter } from '../styles/indexComponents';\r\n\r\nclass Login extends Component {\r\n\r\n    state = {\r\n        login: false\r\n    };\r\n\r\n    checkUser(event) {\r\n        event.preventDefault();\r\n        var user = document.getElementById('form__user');\r\n        var password = document.getElementById('form__password');\r\n        if ((user.value == \"user\") && (password.value == \"12345\")) {\r\n            this.setState({\r\n                login: true\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            (!this.state.login) ? \r\n            (\r\n            <BgColor>\r\n                    <ItemCenterCenter>\r\n                            <h1>Welcome to Weather Data!</h1>\r\n                            <Form action=\"\" onSubmit = {this.checkUser.bind(this)} id = 'form'>\r\n\r\n                                <div className=\"flex-center-center\">\r\n                                    <input type=\"text\" id = 'form__user' className = \"input\" placeholder = \"username\" autoFocus required/>\r\n                                </div>\r\n                                \r\n                                <div className=\"flex-center-center\">\r\n                                    <input type=\"password\" id = 'form__password' className = \"input\" placeholder = \"password\" required/>\r\n                                </div>\r\n                                \r\n                                    <div className=\"flex-center-center\">\r\n                                        <button className = \"button\" type = \"submit\">\r\n                                            login\r\n                                        </button>\r\n                                    </div>\r\n                            </Form>\r\n                        </ItemCenterCenter>\r\n                </BgColor>\r\n            )\r\n            : \r\n            (<Redirect to = \"/weather\"/>)\r\n        );\r\n    }\r\n}\r\n\r\nexport default Login;","\r\n\r\nexport const addCity = (id, city) => (\r\n    {\r\n        type: \"ADD_CITY\",\r\n        id,\r\n        city,\r\n        temprature: \"\"\r\n    }\r\n)\r\n\r\nexport const removeCity = () => (\r\n    {\r\n        type: \"REMOVE_CITY\"\r\n    }\r\n)\r\n\r\n\r\nexport const toggleShouldDelete = (id) => (\r\n    {\r\n        type: \"TOGGLE_DELETE\",\r\n        id\r\n    }\r\n)\r\n\r\n\r\n\r\nexport const setWeather = (id, value) => (\r\n    {\r\n        type: \"SET_WEATHER\",\r\n        id,\r\n        value: Math.round(value * 10) / 10 + \" °C\"\r\n    }\r\n)","import React, { Component } from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport { addCity, setWeather } from \"../actions/index\";\r\nimport { Title} from '../styles/indexComponents';\r\n\r\n\r\nclass AddCity extends Component {\r\n    \r\n    state = {\r\n        id: Date.now().toString()\r\n    }\r\n\r\n    componentDidMount() {\r\n        let input = document.getElementById('addCity__input');\r\n        input.addEventListener('click', function(event){\r\n            input.value = \"\";\r\n            event.preventDefault();\r\n        });\r\n    }\r\n    \r\n    setWeather = (id, city) => {\r\n        const url = 'https://api.openweathermap.org/data/2.5/find?q=';\r\n        const appID = '8c6b34946a9936a4f503e2797bfc6840';\r\n        const query = `&type=like&APPID=${appID}`;\r\n        fetch(`${url}${city}${query}`)\r\n            .then(response => response.json())\r\n            .then(data => this.props.onSetWeather(id, data.list[0].main.temp - 273.15))\r\n            .catch(message => console.log(message));\r\n    }\r\n\r\n\r\n    addCity = () => {\r\n        let input = document.getElementById('addCity__input');\r\n        let re = /^[a-zA-Z]+$/;\r\n        if (!re.test(input.value)) {\r\n            input.value = \"Please write only english letters\";\r\n            return;\r\n        }\r\n\r\n        this.props.onAddCity(this.state.id, input.value);\r\n        this.setWeather(this.state.id, input.value);\r\n        input.value = \"\";\r\n        this.setState({id: Date.now().toString()});\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <h2>\r\n                    Add new city\r\n                </h2>\r\n                <div className=\"flex-center-center flex-column \">\r\n                    \r\n                            <div className=\"flex-center-center\">\r\n                                <input type=\"text\" id = \"addCity__input\" className = \"input\" autoFocus/>\r\n                            </div>\r\n                        \r\n                            <div className=\"flex-center-center\">\r\n                                <button className = \"button\" onClick = {this.addCity}>\r\n                                    Add\r\n                                </button>\r\n                            </div>\r\n                       \r\n                    \r\n                </div>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        onAddCity: (id, city) => {\r\n            dispatch(addCity(id, city))\r\n        },\r\n\r\n        onSetWeather : (id, value) => {\r\n            dispatch(setWeather(id, value))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect (null, mapDispatchToProps)(AddCity);\r\n\r\n\r\n\r\n\r\n","import React, {Component} from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport { removeCity, toggleShouldDelete } from \"../actions/index\";\r\nimport { Ul, Li } from \"../styles/indexComponents\";\r\n\r\n\r\nclass GetData extends Component {\r\n\r\n\r\n    toggle = (event) => {\r\n        let target = event.target;\r\n        if (target.tagName !== \"LI\")\r\n            return;\r\n        // target.style.textDecoration = (target.style.textDecoration === \"line-through\") ? \"none\" : \"line-through\" ;\r\n        this.props.onToggleShouldDelete(target.getAttribute(\"data-key\"));\r\n    }\r\n\r\n    \r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <h2>Your weather data:</h2>\r\n                <Ul onClick = {this.toggle} id = \"weather__ul\">\r\n                    {\r\n                        (this.props.localState.length) ?\r\n                        this.props.localState.map((element, index) => \r\n                            <Li key = {index}\r\n                                data-key = {element.id} \r\n                                style = {{textDecoration: element.shouldDelete ? 'line-through' : 'none'}}\r\n                                >\r\n                                {\r\n                                    (element.temprature) ?\r\n                                    (element.city + \" \" + element.temprature) :\r\n                                    (\"Sorry, cannot find weather for \" + element.city)\r\n                                }\r\n                            </Li>\r\n                        ) :\r\n\r\n                        <p className = \"description\">\r\n                            Add your first city!<br/>\r\n                            For example: \"London\", \"Rome\", \"Moscow\"\r\n                        </p>\r\n                    }\r\n                </Ul>\r\n\r\n                <div className=\"flex-center-center\">\r\n                    <button className = \"button\" onClick = {this.props.onRemoveCity}>\r\n                        Save changes\r\n                    </button>\r\n                </div>\r\n\r\n            </React.Fragment>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        localState: state\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        onRemoveCity : () => {\r\n            dispatch(removeCity())\r\n        },\r\n\r\n        onToggleShouldDelete : (id) => {\r\n            dispatch(toggleShouldDelete(id))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(GetData)","import React, { Component } from 'react';\r\nimport AddCity from '../containers/AddCity';\r\nimport ShowWeather from '../containers/ShowWeather';\r\nimport { BgColor, ItemCenterCenter } from '../styles/indexComponents';\r\n\r\nclass Wrapper extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <BgColor>\r\n                        <AddCity/>\r\n                        <ShowWeather/>\r\n                </BgColor>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Wrapper;","import React, { Component } from 'react';\n\nimport { HashRouter, Route, Switch} from 'react-router-dom';\n\nimport Login from './components/Login';\nimport Wrapper from './components/Wrapper';\n\nclass App extends Component {\n  render() {\n    return (\n      <HashRouter>\n        <Switch>\n          <Route  exact path = '/' component = { Login } />\n          <Route  path = '/weather' component = {Wrapper} />\n        </Switch>\n      </HashRouter>\n    );\n  }\n}\n\nexport default App;\n","\r\n// let initialState = [\r\n//     {\r\n//         id: 0,\r\n//         city: \"London\",\r\n//         temprature: \"\"\r\n//     }\r\n// ]\r\n\r\nlet initialState = [];\r\n\r\nif(localStorage.getItem('city'))\r\n    initialState = JSON.parse(localStorage.getItem('city'));\r\n\r\nexport default (state = initialState, action) => {\r\n\r\n    if (action.type === \"ADD_CITY\") {\r\n        return [\r\n            ...state, \r\n            {\r\n                id: action.id,\r\n                city: action.city,\r\n                temprature: action.temprature,\r\n                shouldDelete: false\r\n            }\r\n        ]\r\n    }\r\n\r\n    if(action.type === \"SET_WEATHER\") {\r\n        return state.map(i =>\r\n            (i.id == action.id) ?\r\n            {...i, temprature: action.value}:\r\n            i);\r\n    }\r\n\r\n    if (action.type === \"TOGGLE_DELETE\") {\r\n        return state.map(i =>\r\n            (i.id == action.id) ?\r\n            {...i, shouldDelete: !i.shouldDelete}:\r\n            i);\r\n    }\r\n\r\n    if (action.type === \"REMOVE_CITY\") {\r\n        return state.filter(function(item) {\r\n            return (item.shouldDelete === false)\r\n        });\r\n    }\r\n\r\n    return state;\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './styles/index.css';\nimport App from './App';\nimport {createStore} from 'redux';\nimport {Provider} from 'react-redux';\nimport reducer from './reducers/index';\nimport { addCity, setWeather } from './actions/index';\n\n\nconst store = createStore(reducer);\n\nstore.subscribe(() => {\n    console.log(store.getState());\n    localStorage.setItem('city', JSON.stringify(store.getState()));\n})\n\nReactDOM.render(\n    <Provider store = {store}>\n        <App />\n    </Provider>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}